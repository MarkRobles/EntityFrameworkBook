//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityFrameworkBook
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PEF : DbContext
    {
        public PEF()
            : base("name=PEF")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<vOfficeAddresses> vOfficeAddresses { get; set; }
    
        public virtual ObjectResult<AddressCountForContact_Result> AddressCountForContact(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddressCountForContact_Result>("AddressCountForContact", contactIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddressTypeCount(string addressType)
        {
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddressTypeCount", addressTypeParameter);
        }
    
        public virtual ObjectResult<Contact> GetContacsbyState(string statecode)
        {
            var statecodeParameter = statecode != null ?
                new ObjectParameter("statecode", statecode) :
                new ObjectParameter("statecode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Contact>("GetContacsbyState", statecodeParameter);
        }
    
        public virtual ObjectResult<Contact> GetContacsbyState(string statecode, MergeOption mergeOption)
        {
            var statecodeParameter = statecode != null ?
                new ObjectParameter("statecode", statecode) :
                new ObjectParameter("statecode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Contact>("GetContacsbyState", mergeOption, statecodeParameter);
        }
    
        public virtual int DeleteContact(Nullable<int> contactid)
        {
            var contactidParameter = contactid.HasValue ?
                new ObjectParameter("contactid", contactid) :
                new ObjectParameter("contactid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContact", contactidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertContact(string firstName, string lastName, string title)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertContact", firstNameParameter, lastNameParameter, titleParameter);
        }
    
        public virtual int UpdateContact(Nullable<int> contactID, string firstName, string lastName, string title)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContact", contactIDParameter, firstNameParameter, lastNameParameter, titleParameter);
        }
    }
}
